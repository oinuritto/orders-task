version: '3.9'

services:
  orders-app:
    build: ./orders
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      numbers-app:
        condition: service_started
    environment:
      SERVER_PORT: 8080
      DB_USERNAME: ${POSTGRES_USER}
      DB_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      NUMBERS_SERVICE_URL: http://numbers-app:8081

  numbers-app:
    build: ./numbers
    ports:
      - "8081:8080"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      SERVER_PORT: 8081
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

  db:
    restart: always
    image: postgres:latest
    volumes:
      - pg_volume:/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5430:5432"
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image:
      'redis:latest'
    container_name: numbers-redis
    ports:
      - "6380:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_volume:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

volumes:
  redis_volume:
    driver: local
  pg_volume:
    driver: local
